# Configuration file

add_foods {
    # Add food items, which can be eaten and restore hunger. Add them in the format:
    # 
    #       <Item name>_____<Item display name>_____<Shines (true or false)>_____<Food restored>_____<Saturation>_____<Wolves eat (true or false)>_____<Always edible (true or false)>_____<Time to eat>_____<Potion effects given (optional)>
    # 
    # Where: 
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The texture location is the name of the png file you place in the resource 
    # pack, in the 'assets/minecraft/items' folder without the .png.
    # - If shines is true, the food item will shine like enchanted items.
    # - The food restored is the amount of food restored in half bars.
    # - The saturation is how much saturation is given by the food (time until you
    # get hungry again).- If wolves eat is true, wolves can eat the food.
    # - If always edible is true, you can eat the food even if you're not hungry.
    # - Time to eat is how long it takes to eat the item (32 normally).
    # - Finally the potions the food gives you is a list of potion effects in the format:
    # 
    #       ..._____<Potion effect id>-<Potion duration>-<Potion level (0 is 1)>-<Probability (between 0.0 and 1.0)>-<Particle type (normal, faded, or none)>_____...
    # 
    # For reference, some of the vanilla foods could be recreated with:
    # 
    # Steak:                  cooked_beef_____Steak_____false_____8_____0.8_____true_____false_____32
    # Rotten Flesh:           rotten_flesh_____Rotten Flesh_____false_____4_____0.1_____true_____false_____32_____17-1200-0-0.8-normal
    # Golden Apple:           golden_apple_____Golden Apple_____false_____4_____1.2_____false_____true_____32_____10-100-0-1.0-normal_____22-2400-0-1.0-normal
    # Enchanted Golden Apple: enchanted_golden_apple_____Enchanted Golden Apple_____true_____4_____1.2_____false_____true_____32_____10-600-4-1.0-normal_____22-2400-0-1.0-normal_____11-6000-0-1.0-normal_____12-6000-0-1.0-normal
    # 
    # As an example, if you wanted to add an item like a slice of pizza, you could add:
    # 
    #       pizza_slice_____Pizza Slice_____false_____6_____0.6_____false_____false_____32
    # 
    # Or if you wanted to add 'ruby' apples like the vanilla golden ones but with
    # health boost instead of absorption, you could add:
    # 
    #       ruby_apple_____§bRuby Apple_____false_____4_____1.2_____false_____true_____32_____10-150-1-1.0-normal_____21-2400-1-1.0-normal
    #       enchanted_ruby_apple_____§dRuby Apple_____true_____4_____1.2_____false_____true_____32_____10-600-4-1.0-normal_____21-2400-4-1.0-normal_____11-6000-0-1.0-normal_____12-6000-0-1.0-normal
    S:foods <
     >
}


add_generic {
    # Add generic items, which have no special functions, but are good for
    # intermediate crafting ingredients and such, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Shines (true or false, optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - If shines is true, the item will have the glow like enchanted
    # items, nether stars, etc.
    # 
    # So for instance to add a ruby, you could put
    # 
    #       ruby_____Ruby
    # 
    # Assuming you had an item model ruby.json in the folder mentioned above.
    # 
    S:generic_items <
     >
}


add_materials {
    # Use this to add materials to create weapons, tools, and armour out of.You will be able to repair the tools, ect. that have this material
    # with the given item, and this will also determine the attack damage
    # of the tools/weapons. Add entries in the form:
    #       <Item name>_____<Item metadata (-1 for any)>_____<Harvest level>_____<Base Durability>_____<Base Efficiency>_____<Base Damage>_____<Enchantability>_____<Armour Durability Factor>_____<Armour Protection List>
    # 
    # For reference, the default materials would be something like:
    # 
    #       minecraft:planks_____-1_____0_____59_____2.0_____0.0_____15_____5_____1-3-2-1
    #       minecraft:leather_____-1_____0_____59_____2.0_____0.0_____15_____5_____1-3-2-1
    #       minecraft:stone_____-1_____1_____131_____4.0_____1.0_____5_____5_____1-3-2-1
    #       minecraft:iron_ingot_____-1_____2_____250_____6.0_____2.0_____14_____15_____2-6-5-2
    #       minecraft:gold_ingot_____-1_____0_____32_____12.0_____0.0_____22_____7_____2-5-3-1
    #       minecraft:diamond_____-1_____3_____1561_____8.0_____3.0_____10_____33_____3-8-6-3
    # 
    # So you should model yours in the same way. You can use materials you add in the
    # generic section by adding lootplusplus: to the front of the item name. For instance,
    # assuming you added the ruby, you could write:
    # 
    #       lootplusplus:ruby_____-1_____3_____1200_____10.0_____3.0_____20_____32_____3-8-6-3
    # 
    # To make rubies a material much like diamond, but faster at digging, with
    # more enchantability, and less durability.
    S:materials <
     >
}


add_thrown {
    # Add thrown items, which you can throw with right click, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Shines (true or false)>_____<Damage>_____<Velocity>_____<Gravity>_____<Inaccuracy>_____<Drop Chance (Optional)>_____<Drops (Optional)>
    # 
    # Where:
    # - The <Item name> will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The <Item display name> is what people will see in-game.
    # - If <Shines> is true, the item will have the glow like enchanted
    # items, nether stars, etc.
    # - the <Damage> is how much damage the thrown item will when hitting an entity.
    # - The <Velocity> is how fast the thrown item will travel.
    # - The <Gravity> is how much the item is affected by gravity.
    # - The <Innacuracy> is how much the thrown item will 'wobble'.
    # - The <Drop chance> is the chance that a drop will happen, from 0.0-1.0.
    # - The <Drops> is a list of drops the item will drop when it lands
    # in the same format as block and entity drops:
    # 
    #       ..._____i-<Item id>-<Min>-<Max>-<Weight (optional)>-<Metadata (optional)>-<NBT Tag (optional)>_____...
    # 
    # for items, or:
    # 
    #       ..._____e-<Entity id>-<Weight (optional)>-<NBT tag (optional)>_____...
    # 
    # for entities, or:
    # 
    #       ..._____c-<Weight>-<Command>_____...
    # 
    # for commands, where:
    # - The <Item id> or<Entity id> is the string id for the item or entity.- The <Weight> is the chance that this drop will be chosen out of all the combined weights.
    # Make sure it's bigger than 0. If you don't specify the weight, it will default to 1.
    # - And the <Command> is a command you want to run where the block breaks.
    # 
    # Also, you can put %%%%% between drops to create groups of drops. In a group, only the weight of
    # the first drop will count.
    # 
    # Some examples of default items could be:
    # 
    #       snowball: snowball_____Snowball_____false_____0.0_____1.5_____0.03_____0.0
    #       egg: egg_____Egg_____false_____0.0_____1.5_____0.03_____0.0_____0.12_____e-Chicken-31-{Age:-24000}_____e-Chicken-1-{Age:-24000}%%%%%e-Chicken-1-{Age:-24000}%%%%%e-Chicken-1-{Age:-24000}%%%%%e-Chicken-1-{Age:-24000}
    #       xp bottle: experience_bottle_____Bottle o' Enchanting_____true_____0.0_____0.7_____0.07_____-20.0_____1.0_____e-XPOrb-1-{Value:3}%%%%%c-1-playsound game.potion.smash @a ~ ~ ~_____e-XPOrb-1-{Value:3}%%%%%e-XPOrb-1-{Value:3}%%%%%c-1-playsound game.potion.smash @a ~ ~ ~_____e-XPOrb-1-{Value:7}%%%%%e-XPOrb-1-{Value:2}%%%%%c-1-playsound game.potion.smash @a ~ ~ ~_____e-XPOrb-1-{Value:7}%%%%%e-XPOrb-1-{Value:3}%%%%%e-XPOrb-1-{Value:1}%%%%%c-1-playsound game.potion.smash @a ~ ~ ~
    # 
    # As an example, if you wanted to add a 'grenade' that turns into TNT:
    # 
    #       grenade_____Grenade_____false_____0.0_____1.0_____0.05_____0.0_____1.0_____e-PrimedTnt-1-{Fuse:40}
    # 
    # Assuming you had an item model ruby.json in the folder mentioned above.
    # 
    S:thrown <
     >
}


additions_armor {
    # Add boots, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Material item name>_____<Armour model texure location>_____<Material item metadata (optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The armour model texture name is the texture that will render on your character
    # when the armor is worn. That one Should be in the 'assets/lootplusplus/textures/models/armor' folder.
    # 
    # So for instance,
    # assuming that you added the ruby item in the generic section and material
    # for the item, you can add ruby boots with:
    # 
    #       ruby_boots_____Ruby Boots_____lootplusplus:ruby_____lootplusplus:ruby_layer_1
    # 
    # Assuming you had a model ruby_boots.json in the models/item folder, and a texture
    # ruby_layer_1.png in the textures/models/armor folder.
    # 
    S:boots <
     >

    # Add a chestplate, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Material item name>_____<Armour model texure location>_____<Material item metadata (optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The armour model texture name is the texture that will render on your character
    # when the armor is worn. That one Should be in the 'assets/lootplusplus/models/armor' folder.
    # 
    # So for instance,
    # assuming that you added the ruby item in the generic section and material
    # for the item, you can add a ruby chestplate with:
    # 
    #       ruby_chestplate_____Ruby Chestplate_____lootplusplus:ruby_____lootplusplus:ruby_layer_1
    # 
    # Assuming you had a model ruby_chestplate.json in the models/item folder, and a texture
    # ruby_layer_1.png in the textures/models/armor folder.
    # 
    S:chestplates <
     >

    # Add a helmet, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Material item name>_____<Armour model texure location>_____<Material item metadata (optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The armour model texture name is the texture that will render on your character
    # when the armor is worn. That one Should be in the 'assets/lootplusplus/models/armor' folder.
    # 
    # So for instance, assuming that you added the ruby item in the generic section
    # and material for the item, you can add a ruby helmet with:
    # 
    #       ruby_helmet_____Ruby Helmet_____lootplusplus:ruby_____lootplusplus:ruby_layer_1
    # 
    # Assuming you had a model ruby_helmet.json in the models/item folder, and a texture
    # ruby_layer_1.png in the textures/models/armor folder.
    # 
    S:helmets <
     >

    # Add a pair of leggings, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Material item name>_____<Armour model texure location>_____<Material item metadata (optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The armour model texture name is the texture that will render on your character
    # when the armor is worn. That one Should be in the 'assets/lootplusplus/models/armor' folder.
    # 
    # So for instance,
    # assuming that you added the ruby item in the generic section and material
    # for the item, you can add ruby leggings with:
    # 
    #       ruby_leggings_____Ruby leggings_____lootplusplus:ruby_____lootplusplus:ruby_layer_2
    # 
    # Assuming you had a model ruby_leggings.json in the models/item folder, and a texture
    # ruby_layer_2.png in the textures/models/armor folder. Note that it's layer 2 in this case,
    # not layer 1! The leggings are on a different layer.
    # 
    S:leggings <
     >
}


additions_bows {
    # Add bows, which act like vanilla bows. Add them in the format:
    # 
    #       <Item name>_____<Item display name>_____<Durability>_____<Base damage>_____<Draw time>_____<# of arrows shot>_____<Enchantability>_____<Repair item name (write none for none)>_____<Repair item meta (-1 for any)>_____<Custom ammo item (optional, must be throwable added item)>
    # 
    # Where: 
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). You should add 4 model files for the item
    # in the resource pack at assets/lootplusplus/models/item/<Item name>,
    # assets/lootplusplus/models/item/<Item name>_pulling_0,
    # assets/lootplusplus/models/item/<Item name>_pulling_1, and
    # assets/lootplusplus/models/item/<Item name>_pulling_2.
    # - The item display name is what people will see in-game. 
    # - The durability is the durability of the bow.
    # - The base damage is the amount of damage added to any arrows you shoot.
    # - The draw time is how fast you can draw the bow.
    # - The enchantability is how enchantable the bow is.
    # - The repair item is what you can repair the bow with ('none' if not repairable).
    # - The repair meta is the metadata for the repair item.
    # - The custom ammo item is the item this bow will shoot. Leave it out for the bow
    # to shoot arrows. If you include it, it must be a throwable item you added above.
    # 
    # For reference the vanilla bow would be something like:
    # 
    #       bow_____Bow_____384_____0.0_____20_____1_____1_____none_____-1
    # 
    # If you wanted to add ruby reinforced bows, regular and double, you could put:
    # 
    #       ruby_bow_____Ruby Reinforced Bow_____1000_____2.0_____22_____1_____5_____lootplusplus:ruby_____-1
    #       ruby_double_bow_____Double Ruby Reinforced Bow_____1500_____2.0_____25_____2_____10_____lootplusplus:ruby_bow_____-1
    # 
    S:bows <
     >
}


additions_multitools {
    # Add a multitool, which can act like multiple tools at once, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Tool type(s)>_____<Harvest level>_____<Durability>_____<Damage>_____<Efficiency>_____<Enchantability>_____<Repair item name (write none for none)>_____<Repair item meta (-1 for any)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The tool types are the classes of tool that this multitool has, with dashes between
    # them. The possible values are:
    # 
    #       sword, pickaxe, axe, shovel, hoe
    # 
    # - The durability, damage, and efficiency, and enchantability are what you would expect.
    # - The repair item is what item you can repair the tool with. If you put 'none',
    # the multitool will not be repairable.
    # - The repair item metadata is the metadata of the repair item.
    # 
    # So for instance, assuming that you added the ruby item in the generic
    # section and material for the item, you can add a ruby multitool that acts
    # like a pickaxe, axe, and shovel with:
    # 
    #       ruby_paxel_____Ruby Paxel_____pickaxe-axe-shovel_____2_____1200_____6.0_____10.0_____20_____lootplusplus:ruby_____-1
    # 
    # Assuming you had a model ruby_paxel.json in the folder mentioned above, and
    # if you want to add a ruby battleaxe that acts as both a sword and an axe, you
    # could put:
    # 
    #       ruby_battleaxe_____Ruby Battleaxe_____sword-axe_____2_____1200_____8.0_____10.0_____20_____lootplusplus:ruby_____-1
    # 
    S:multitools <
     >
}


additions_tools {
    # Add axes, which act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Material item name>_____<Material item metadata (optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The material item name is the material that you can repair the tool with
    # which should be registered in the adding material section first.
    # 
    # So for instance, assuming that you added the ruby item in the generic
    # section and material for the item, you can add a ruby axe with:
    # 
    #       ruby_axe_____Ruby Axe_____lootplusplus:ruby
    # 
    # Assuming you had a model ruby_axe.json in the folder mentioned above.
    # 
    S:axes <
     >

    # Add a hoe, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Material item name>_____<Material item metadata (optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The material item name is the material that you can repair the tool with
    # which should be registered in the adding material section first.
    # 
    # So for instance, assuming that you added the ruby item in the generic
    # section and material for the item, you can add a ruby hoe with:
    # 
    #       ruby_hoe_____Ruby Hoe_____lootplusplus:ruby
    # 
    # Assuming you had a model ruby_hoe.json in the folder mentioned above.
    # 
    S:hoes <
     >

    # Add pickaxes, which act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Material item name>_____<Material item metadata (optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The material item name is the material that you can repair the tool with
    # which should be registered in the adding material section first.
    # 
    # So for instance, assuming that you added the ruby item in the generic
    # section and material for the item, you can add a ruby pickaxe with:
    # 
    #       ruby_pickaxe_____Ruby Pickaxe_____lootplusplus:ruby
    # 
    # Assuming you had a model ruby_pickaxe.json in the folder mentioned above.
    # 
    S:pickaxes <
     >

    # Add a shovel, which will act like the vanilla ones, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Material item name>_____<Material item metadata (optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The material item name is the material that you can repair the tool with
    # which should be registered in the adding material section first.
    # 
    # So for instance, assuming that you added the ruby item in the generic
    # section and material for the item, you can add a ruby shovel with:
    # 
    #       ruby_shovel_____Ruby Shovel_____lootplusplus:ruby
    # 
    # Assuming you had a model ruby_shovel.json in the folder mentioned above.
    # 
    S:shovels <
     >

    # Add swords, which act like the vanilla swords, in the format:
    # 
    #       <Item name>_____<Item display name>_____<Material item name>_____<Added Damage (above innate material damage)>_____<Material item metadata (optional)>
    # 
    # Where:
    # - The item name will be what the item is registered as (there will be
    # a 'lootplusplus:' added to the front of it automatically; don't add
    # anything with a colon yourself!). Note that you should also add a model file with
    # this name in your resource pack in the folder assets/lootplusplus/models/item/<Item name>.json.
    # - The item display name is what people will see in-game.
    # - The material item name is the material that you can repair the tool with
    # which should be registered in the adding material section first.
    # 
    # So for instance, assuming that you added the ruby item
    # in the generic section and material for the item, you can add a ruby sword,
    # dagger, and big sword with:
    #       ruby_dagger_____Ruby Dagger_____lootplusplus:ruby_____2.0
    #       ruby_sword_____Ruby Sword_____lootplusplus:ruby_____4.0
    #       ruby_big_sword_____Ruby Big Sword_____lootplusplus:ruby_____6.0
    # 
    # Assuming you had a models for each in the folder mentioned above.
    # 
    S:swords <
     >
}


